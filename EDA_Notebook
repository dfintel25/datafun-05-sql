
Exploratory Data Analysis Project
Analyst: Derek Fintel

Date: 02/06/2025

Contact: s542635@nwmissour.edu

Executive Summary
Our organization has commissioned a detailed analysis of three main Iris species via an available Iris dataset. We will employ programs to retrieve and reveal data insights from within the dataset.

Additionally, it is required to capture each discreet step with documentation of process, code, and commentary.

1) Begin by importing needed programs
pandas for various data functions.

seaborn for statistical graphics.

matplotlib for data visualizations.

import pandas as pd
import seaborn as sns
import matplotlib 

# Axes object (basic plot type returned by Seaborn)
from matplotlib.axes import Axes
2) Load Sample Data
We use iris_dataframe to provide a sample dataset.

We use pd.dataframe = sns to enable reading/manipulation of the dataset.

We then read the columns and initial rows with .columns & .head().

# Load the Iris dataset into pandas DataFrame
iris_df: pd.DataFrame = sns.load_dataset('iris')

# List column names
iris_df.columns     

# Inspect first few rows of the DataFrame
iris_df.head()
sepal_length	sepal_width	petal_length	petal_width	species
0	5.1	3.5	1.4	0.2	setosa
1	4.9	3.0	1.4	0.2	setosa
2	4.7	3.2	1.3	0.2	setosa
3	4.6	3.1	1.5	0.2	setosa
4	5.0	3.6	1.4	0.2	setosa
3) Initial Data Inspection
Here we specify the depth of row reading desired.

We then inspect the .shape, .dtypes, and columns via .info(), of the dataset.

This script will generate a summary report of findings.

# Specify the number of rows to display
iris_df.head(10)

# Inspect the shape of the DataFrame with shape attribute
# The shape is a tuple with count of rows and columns in the DataFrame
iris_df.shape

# Inspect the data types of the columns with dtypes attribute
# The data types are returned as a pandas Series
iris_df.dtypes

# Inspect the data types of the columns with info() method
iris_df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 5 columns):
 #   Column        Non-Null Count  Dtype  
---  ------        --------------  -----  
 0   sepal_length  150 non-null    float64
 1   sepal_width   150 non-null    float64
 2   petal_length  150 non-null    float64
 3   petal_width   150 non-null    float64
 4   species       150 non-null    object 
dtypes: float64(4), object(1)
memory usage: 6.0+ KB
4) Initial Descriptive Statistics
Next we'll leverage .describe() to generate a summary statistics report.

# Inspect summary statistics for numerical columns
iris_df.describe()
sepal_length	sepal_width	petal_length	petal_width
count	150.000000	150.000000	150.000000	150.000000
mean	5.843333	3.057333	3.758000	1.199333
std	0.828066	0.435866	1.765298	0.762238
min	4.300000	2.000000	1.000000	0.100000
25%	5.100000	2.800000	1.600000	0.300000
50%	5.800000	3.000000	4.350000	1.300000
75%	6.400000	3.300000	5.100000	1.800000
max	7.900000	4.400000	6.900000	2.500000
5) Initial Data Distribution for Numerical Columns
Next we call upon .hist() two times, once for a specific column and again for all columns.

We then pull .pyplot.show() to visualize the histogram.

The first .hist() shows us the distribution of the specific column.

And

The second .hist() then conveys the distribution across all columns.

# Inspect histogram by one numerical column
iris_df['sepal_length'].hist()

# Inspect histograms for ALL numerical columns
iris_df.hist()

# Show all plots
matplotlib.pyplot.show()


6) Initial Data Distribution for Categorical Columns
Next we use .value_counts() to read values of a specified column.

We then collect variable counts of "objects & "category" via .select_dtypes.

Finally, we take these counts and plot them in a bar chart via .pyplot.show().

# Inspect value counts by categorical column
# Column name must be EXACT.
# The value_counts() method is only available for Series objects.
# The value_counts() method returns a pandas Series with the counts of unique values in the column.
iris_df['species'].value_counts()

# Inspect value counts for ALL categorical columns
for col in iris_df.select_dtypes(include=['object', 'category']).columns:
    # Display count plot
    sns.countplot(x=col, data=iris_df)
    matplotlib.pyplot.title(f'Distribution of {col}')
    matplotlib.pyplot.show()

# Show all plots
matplotlib.pyplot.show()

7) Initial Data Transformation and Feature Engineering
In our next segment, we needed to perform some Feature Engineering to provide needed changes or alterations to our working dataset.

We use .rename to change specifically the 'sepal_length' column to 'Sepal Length'.

Then we add a new column and data category, 'Sepal Area', by multiplying existing columns 'Sepal Length' and 'sepal_width'.

# Feature Engineering
# Renaming a column
iris_df.rename(columns={'sepal_length': 'Sepal Length'}, inplace=True)

# Adding a new column
iris_df['Sepal Area'] = iris_df['Sepal Length'] * iris_df['sepal_width']
8) Initial Visualizations
Next we'll visualize the querried data with .pairplot and specify a hue empahsis on 'species'.

We'll call the visualization via pyplot.show().

This visualization yields us scatter plots and area views of our specified criteria.

# Create a pairplot of the Iris dataset
# A pairplot is a grid of scatter plots for each pair of numerical columns in the dataset
# The hue parameter is used to color the data points 
# by species (a categorical column)
sns.pairplot(iris_df, hue='species')

# Show all plots
matplotlib.pyplot.show()

9) Specific Scatter Plot
Here we craft a scatter plot with specific criteria and variables.

We're intentionally trying to analyze "Sepal Length" against "Sepal Area" of the various species.

This charting affords us the ability to analyze three species within a specified calculation, revealing their groupings and overall spread.

# A scatter plot is a plot of two numerical variables.
scatter_plt: Axes = sns.scatterplot(
    data=iris_df, x="Sepal Length", y="Sepal Area", hue="species"
)

# Set axis labels using the Matplotlib Axes methods set_xlabel() and set_ylabel()
scatter_plt.set_xlabel("Sepal Length (mm)")
scatter_plt.set_ylabel("Sepal Area (mm squared)")   

# Set the title using the Matplotlib Axes set_title() method
scatter_plt.set_title("Chart 1. Iris Sepal Length vs. Sepal Area (by Species)")

matplotlib.pyplot.show()

Summary
This notebook provides an overview of funtions and programs that enabled us to analyze, query, and chart, specific elements of interest from our dataset. We can leverage these tools to import, read, analyze, modify, create, position, and visualize any number of criteria within a dataset - in our case, down to specific columns.

Please connect with me (email above) should you have any questions as this assignment has made me an expert.